
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  username      String?         @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[] 
  sessions      Session[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isBasic               Boolean @default(false)               
  isPro                 Boolean @default(false)               
  isMember              Boolean @default(false) 

  isAdmin               Boolean @default(false) 
  isPrivate             Boolean @default(false)      

  projects Project[]
  pages Page[]
  

  aiGens aiGen?

  Subscription Subscription?
}

//auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

 model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  slug         String   
  name         String
  description  String?
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  pages Page[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slug])
}


 model Page{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId    String   @db.ObjectId
  userId       String   @db.ObjectId
  slug         String   
  name         String
  content      String

  isPublished  Boolean? @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  publicPageConfig publicPageConfig?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId, slug])
}

model aiGen {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    userId        String    @db.ObjectId @unique

    count         String?      @default("0")
    startDate     DateTime?    @default(now())
    
    daysLeftCount  String?     @default("30")

    createdAt     DateTime?     @default(now())
    updatedAt     DateTime?     @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model publicPageConfig {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    pageId        String    @db.ObjectId @unique
    
    arrObj        String[]

    displayName   String?
    contactMail   String?
    contactLink   String?
    projectName   String?

    showAuthor        Boolean? @default(true)  
    toggleDarkmode    Boolean? @default(true)

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
    page         Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
}


model Subscription {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId @unique
  razorpayId     String      @unique // Razorpay subscription ID
  plan           String
  status         String      // active, canceled, etc.
  currentPeriodEnd DateTime  // When the subscription period ends

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user           User        @relation(fields: [userId], references: [id])
}